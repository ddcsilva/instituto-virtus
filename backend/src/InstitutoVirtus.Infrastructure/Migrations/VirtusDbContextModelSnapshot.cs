// <auto-generated />
using System;
using InstitutoVirtus.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InstitutoVirtus.Infrastructure.Migrations
{
    [DbContext(typeof(VirtusDbContext))]
    partial class VirtusDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.19");

            modelBuilder.Entity("Aula", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Conteudo")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataAula")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Realizada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<Guid>("TurmaId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Realizada");

                    b.HasIndex("TurmaId", "DataAula")
                        .IsUnique();

                    b.ToTable("Aulas", (string)null);
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Avaliacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataAplicacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Peso")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3, 2)
                        .HasColumnType("TEXT")
                        .HasDefaultValue(1m);

                    b.Property<Guid>("TurmaId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TurmaId");

                    b.ToTable("Avaliacoes", (string)null);
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Curso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("TEXT");

                    b.Property<int>("CargaHoraria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ValorMensalidade")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Ativo");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("Cursos", (string)null);
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Matricula", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataConclusao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataMatricula")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataTrancamento")
                        .HasColumnType("TEXT");

                    b.Property<string>("MotivoSaida")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TurmaId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DataMatricula");

                    b.HasIndex("Status");

                    b.HasIndex("TurmaId");

                    b.HasIndex("AlunoId", "TurmaId")
                        .IsUnique();

                    b.ToTable("Matriculas", (string)null);
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Mensalidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataPagamento")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("TEXT");

                    b.Property<string>("FormaPagamento")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MatriculaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacao")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DataVencimento");

                    b.HasIndex("MatriculaId");

                    b.HasIndex("Status");

                    b.ToTable("Mensalidades", (string)null);
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Nota", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AvaliacaoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Valor")
                        .HasPrecision(4, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("AvaliacaoId", "AlunoId")
                        .IsUnique();

                    b.ToTable("Notas", (string)null);
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Pagamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("ComprovanteUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeioPagamento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenciaExterna")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ResponsavelId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DataPagamento");

                    b.HasIndex("ReferenciaExterna")
                        .IsUnique()
                        .HasFilter("ReferenciaExterna IS NOT NULL");

                    b.HasIndex("ResponsavelId");

                    b.ToTable("Pagamentos", (string)null);
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.PagamentoParcela", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MensalidadeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PagamentoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MensalidadeId");

                    b.HasIndex("PagamentoId", "MensalidadeId")
                        .IsUnique();

                    b.ToTable("PagamentosParcelas", (string)null);
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Pessoa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoPessoa")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Ativo");

                    b.HasIndex("TipoPessoa");

                    b.ToTable("Pessoas", (string)null);

                    b.HasDiscriminator<int>("TipoPessoa").HasValue(4);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Presenca", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AulaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Justificativa")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("Status");

                    b.HasIndex("AulaId", "AlunoId")
                        .IsUnique();

                    b.ToTable("Presencas", (string)null);
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.ResponsavelAluno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Parentesco")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Principal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ResponsavelId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("Principal");

                    b.HasIndex("ResponsavelId", "AlunoId")
                        .IsUnique();

                    b.ToTable("ResponsaveisAlunos", (string)null);
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Turma", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AnoLetivo")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("TEXT");

                    b.Property<int>("Capacidade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CursoId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("DiaSemana")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Periodo")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sala")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Ativo");

                    b.HasIndex("CursoId");

                    b.HasIndex("ProfessorId", "DiaSemana", "AnoLetivo", "Periodo");

                    b.ToTable("Turmas", (string)null);
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Aluno", b =>
                {
                    b.HasBaseType("InstitutoVirtus.Domain.Entities.Pessoa");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Professor", b =>
                {
                    b.HasBaseType("InstitutoVirtus.Domain.Entities.Pessoa");

                    b.Property<string>("Especialidade")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Responsavel", b =>
                {
                    b.HasBaseType("InstitutoVirtus.Domain.Entities.Pessoa");

                    b.Property<decimal>("SaldoCredito")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Aula", b =>
                {
                    b.HasOne("InstitutoVirtus.Domain.Entities.Turma", "Turma")
                        .WithMany("Aulas")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Avaliacao", b =>
                {
                    b.HasOne("InstitutoVirtus.Domain.Entities.Turma", "Turma")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Matricula", b =>
                {
                    b.HasOne("InstitutoVirtus.Domain.Entities.Aluno", "Aluno")
                        .WithMany("Matriculas")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InstitutoVirtus.Domain.Entities.Turma", "Turma")
                        .WithMany("Matriculas")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Mensalidade", b =>
                {
                    b.HasOne("InstitutoVirtus.Domain.Entities.Matricula", "Matricula")
                        .WithMany("Mensalidades")
                        .HasForeignKey("MatriculaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("InstitutoVirtus.Domain.ValueObjects.Dinheiro", "Valor", b1 =>
                        {
                            b1.Property<Guid>("MensalidadeId")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("Valor")
                                .HasPrecision(10, 2)
                                .HasColumnType("TEXT")
                                .HasColumnName("Valor");

                            b1.HasKey("MensalidadeId");

                            b1.ToTable("Mensalidades");

                            b1.WithOwner()
                                .HasForeignKey("MensalidadeId");
                        });

                    b.OwnsOne("InstitutoVirtus.Domain.ValueObjects.Competencia", "Competencia", b1 =>
                        {
                            b1.Property<Guid>("MensalidadeId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Ano")
                                .HasColumnType("INTEGER")
                                .HasColumnName("CompetenciaAno");

                            b1.Property<int>("Mes")
                                .HasColumnType("INTEGER")
                                .HasColumnName("CompetenciaMes");

                            b1.HasKey("MensalidadeId");

                            b1.HasIndex("Ano", "Mes");

                            b1.ToTable("Mensalidades");

                            b1.WithOwner()
                                .HasForeignKey("MensalidadeId");
                        });

                    b.Navigation("Competencia")
                        .IsRequired();

                    b.Navigation("Matricula");

                    b.Navigation("Valor")
                        .IsRequired();
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Nota", b =>
                {
                    b.HasOne("InstitutoVirtus.Domain.Entities.Aluno", "Aluno")
                        .WithMany("Notas")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InstitutoVirtus.Domain.Entities.Avaliacao", "Avaliacao")
                        .WithMany("Notas")
                        .HasForeignKey("AvaliacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Avaliacao");
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Pagamento", b =>
                {
                    b.HasOne("InstitutoVirtus.Domain.Entities.Responsavel", "Responsavel")
                        .WithMany("Pagamentos")
                        .HasForeignKey("ResponsavelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("InstitutoVirtus.Domain.ValueObjects.Dinheiro", "ValorTotal", b1 =>
                        {
                            b1.Property<Guid>("PagamentoId")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("Valor")
                                .HasPrecision(10, 2)
                                .HasColumnType("TEXT")
                                .HasColumnName("ValorTotal");

                            b1.HasKey("PagamentoId");

                            b1.ToTable("Pagamentos");

                            b1.WithOwner()
                                .HasForeignKey("PagamentoId");
                        });

                    b.Navigation("Responsavel");

                    b.Navigation("ValorTotal")
                        .IsRequired();
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.PagamentoParcela", b =>
                {
                    b.HasOne("InstitutoVirtus.Domain.Entities.Mensalidade", "Mensalidade")
                        .WithMany()
                        .HasForeignKey("MensalidadeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InstitutoVirtus.Domain.Entities.Pagamento", "Pagamento")
                        .WithMany("Parcelas")
                        .HasForeignKey("PagamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("InstitutoVirtus.Domain.ValueObjects.Dinheiro", "ValorAlocado", b1 =>
                        {
                            b1.Property<Guid>("PagamentoParcelaId")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("Valor")
                                .HasPrecision(10, 2)
                                .HasColumnType("TEXT")
                                .HasColumnName("ValorAlocado");

                            b1.HasKey("PagamentoParcelaId");

                            b1.ToTable("PagamentosParcelas");

                            b1.WithOwner()
                                .HasForeignKey("PagamentoParcelaId");
                        });

                    b.Navigation("Mensalidade");

                    b.Navigation("Pagamento");

                    b.Navigation("ValorAlocado")
                        .IsRequired();
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Pessoa", b =>
                {
                    b.OwnsOne("InstitutoVirtus.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("PessoaId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Endereco")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("TEXT")
                                .HasColumnName("Email");

                            b1.HasKey("PessoaId");

                            b1.HasIndex("Endereco");

                            b1.ToTable("Pessoas");

                            b1.WithOwner()
                                .HasForeignKey("PessoaId");
                        });

                    b.OwnsOne("InstitutoVirtus.Domain.ValueObjects.Telefone", "Telefone", b1 =>
                        {
                            b1.Property<Guid>("PessoaId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("TEXT")
                                .HasColumnName("Telefone");

                            b1.HasKey("PessoaId");

                            b1.HasIndex("Numero");

                            b1.ToTable("Pessoas");

                            b1.WithOwner()
                                .HasForeignKey("PessoaId");
                        });

                    b.Navigation("Email");

                    b.Navigation("Telefone")
                        .IsRequired();
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Presenca", b =>
                {
                    b.HasOne("InstitutoVirtus.Domain.Entities.Aluno", "Aluno")
                        .WithMany("Presencas")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aula", "Aula")
                        .WithMany("Presencas")
                        .HasForeignKey("AulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Aula");
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.ResponsavelAluno", b =>
                {
                    b.HasOne("InstitutoVirtus.Domain.Entities.Aluno", "Aluno")
                        .WithMany("Responsaveis")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InstitutoVirtus.Domain.Entities.Responsavel", "Responsavel")
                        .WithMany("Alunos")
                        .HasForeignKey("ResponsavelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Responsavel");
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Turma", b =>
                {
                    b.HasOne("InstitutoVirtus.Domain.Entities.Curso", "Curso")
                        .WithMany("Turmas")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InstitutoVirtus.Domain.Entities.Professor", "Professor")
                        .WithMany("Turmas")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("InstitutoVirtus.Domain.ValueObjects.HorarioAula", "Horario", b1 =>
                        {
                            b1.Property<Guid>("TurmaId")
                                .HasColumnType("TEXT");

                            b1.Property<TimeSpan>("HoraFim")
                                .HasColumnType("TEXT")
                                .HasColumnName("HoraFim");

                            b1.Property<TimeSpan>("HoraInicio")
                                .HasColumnType("TEXT")
                                .HasColumnName("HoraInicio");

                            b1.HasKey("TurmaId");

                            b1.ToTable("Turmas");

                            b1.WithOwner()
                                .HasForeignKey("TurmaId");
                        });

                    b.Navigation("Curso");

                    b.Navigation("Horario")
                        .IsRequired();

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("Aula", b =>
                {
                    b.Navigation("Presencas");
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Avaliacao", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Curso", b =>
                {
                    b.Navigation("Turmas");
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Matricula", b =>
                {
                    b.Navigation("Mensalidades");
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Pagamento", b =>
                {
                    b.Navigation("Parcelas");
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Turma", b =>
                {
                    b.Navigation("Aulas");

                    b.Navigation("Avaliacoes");

                    b.Navigation("Matriculas");
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Aluno", b =>
                {
                    b.Navigation("Matriculas");

                    b.Navigation("Notas");

                    b.Navigation("Presencas");

                    b.Navigation("Responsaveis");
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Professor", b =>
                {
                    b.Navigation("Turmas");
                });

            modelBuilder.Entity("InstitutoVirtus.Domain.Entities.Responsavel", b =>
                {
                    b.Navigation("Alunos");

                    b.Navigation("Pagamentos");
                });
#pragma warning restore 612, 618
        }
    }
}
